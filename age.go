package encryptedstorage

import (
	"github.com/getsops/sops/v3/age"
	"github.com/getsops/sops/v3/keys"

	"github.com/caddyserver/caddy/v2"
)

func init() {
	caddy.RegisterModule(Age{})
}

// Age is a key type to be used with encryption provider. This key
// type uses [age](age-encryption.org) key-pair for encryption/decryption.
// See more: [https://github.com/getsops/sops#encrypting-using-age](https://github.com/getsops/sops#encrypting-using-age)
type Age struct {
	// The public key generated by `age`
	Recipient string `json:"recipient,omitempty"`

	// The private keys generated by `age`
	Identities []string `json:"identities,omitempty"`

	mk *age.MasterKey
}

// Provision implements caddy.Provisioner.
func (a *Age) Provision(ctx caddy.Context) error {
	r, ok := ctx.Value(caddy.ReplacerCtxKey).(*caddy.Replacer)
	if !ok {
		r = caddy.NewReplacer()
	}
	a.Recipient = r.ReplaceKnown(a.Recipient, "")
	mk, err := age.MasterKeyFromRecipient(a.Recipient)
	if err != nil {
		return err
	}
	if len(a.Identities) > 0 {
		identities := &age.ParsedIdentities{}
		for k, v := range a.Identities {
			a.Identities[k] = r.ReplaceKnown(v, "")
		}
		if err := identities.Import(a.Identities...); err != nil {
			return err
		}
		identities.ApplyToMasterKey(mk)
	}
	a.mk = mk

	return nil
}

// CaddyModule implements caddy.Module.
func (a Age) CaddyModule() caddy.ModuleInfo {
	return caddy.ModuleInfo{
		ID: "caddy.storage.encrypted.key.age",
		New: func() caddy.Module {
			return new(Age)
		},
	}
}

// ToMasterkey implements Masterkeyer.
func (a *Age) ToMasterkey() keys.MasterKey {
	return a.mk
}

var (
	_ caddy.Module       = (*Age)(nil)
	_ caddy.Provisioner  = (*Age)(nil)
	_ MasterkeyConverter = (*Age)(nil)
)
